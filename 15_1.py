""" Операция    | Аналог в Python   | Название 
        ∧       |       and         | Конъюнкция
        ∨       |       or          | Дизъюнкция
        ≡       |       ==          | Эквиваленция
        =       |       ==          | Равно
        ≠       |       !=          | Не равно
        →       |       <=          | Импликация
        ¬       |       not()       | Отрицание
Делимость-------------------------------------------------------
      Дел(n,m)  |      n%m == 0     | Делится без остатка
Коньюнкция------------------------------------------------------
        &       |       &           | Поразрядная конъюнкция
Множества-------------------------------------------------------
        ∈       |       in          | Принадлежит
Отрезки---------------------------------------------------------
P = [a;b] x ∈ P |  a <= x <= b      | x лежит на отрезке P
"""
# Решается перебором. При этом нам нужно перебирать все значения, которые даны в функции.
# Выражения, чтобы код был более читаемый, для отладки можно выделить в функцию.
# Перебор: все циклы вложенные (с отступом друг от друга)
"""
for a in range(1000):
    for x in range(100):
        for y in range(100):
            и т д
"""
            #Внутри проверяем функцию. Посокльку выражение должно быть истино для всех параметров, 
            #то значение а не подходит если хотя бы для одного х или y значение функции не 1:
"""         
            if f(x,y,a) == 0:
                flag = False
                break

"""

####################################################################################################################################
# Назовите такое наименьшее целое A, чтобы выражение было истинно при любых целых неотрицательных значениях x, y.
# (y + 3x < A) ∨ (x > 10) ∨ (y > 20)

def f(x,y,A):
    return (y + 3*x < A) or (x > 10) or (y > 20)

for A in range(1000): # перебираем параметр А
    flag = True # если в конце перебора флаг останется значит параметр А подходит
    for x in range(100): # Для каждого параметр А перебираем х
        for y in range(100): # и y
            if f(x,y,A) == 0: # Если хотябы для одного х или y функция не истина
                flag = False # то параметр А не подходит
                break
    if flag: # Если флаг не изменился, то есть для всех х и y функция истина
        print(A) # Параметр А подходит

####################################################################################################################################
# Обозначим через ДЕЛ(n, m) утверждение "натуральное число n делится без остатка на натуральное число m". 
# Для какого наибольшего натурального числа А формула:
# ¬ДЕЛ(x, A) → (ДЕЛ(x, 6) → ¬ДЕЛ(x, 9))
# тождественно истинна, то есть принимает значение 1 при любом натуральном значении переменной x?

def Del(x,A):
    return x%A == 0
def f(x,A):
    return (not(Del(x,A))) <= (Del(x,6)<=(not(Del(x,9))))

for A in range(1,1000):
    flag = True
    for x in range(100):
        if not(f(x,A)):
            flag = False
            break
    if flag:
        print(A)
####################################################################################################################################
# Обозначим через m&n поразрядную конъюнкцию неотрицательных целых чисел m и n. Так, например, 14&5 = 11102&01012 = 01002 = 4.
# Для какого наименьшего неотрицательного целого числа А формула
#   x&25 ≠ 0 → (x&17 = 0 → x&A ≠ 0)
# тождественно истинна (т.е. принимает значение 1 при любом неотрицательном целом значении переменной x)?

def f(x,a):
    return (x&25 != 0) <= ((x&17 == 0) <= (x&a != 0))

for a in range(1,100):
    flag = True
    for x in range(1,100):
        if not(f(x,a)):
            flag = False
            break
    if flag:
        print(a)

