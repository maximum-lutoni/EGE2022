# Рекурсия - алгоритм который обращается сам к себе
# Решение - грамотно переписать функцию F(n)

########################################################################################################

# Алгоритм вычисления значения функции F(n), где n — натуральное число, задан следующими соотношениями.

#    F(n) = 2 ⋅ n при n ≤ 4;
#    F(n) = F(n – 1) + 3 при 4 < n < 9;
#    F(n) = F(n – 3) + 5 + F(n – 1) при n ≥ 9.

# Чему равно значение функции F(28)?

def F(n):
    if n <= 4:
        return 2 * n
    if 4 < n < 9:
        return F(n - 1) + 3
    if n >= 9:
        return F(n - 3) + 5 + F(n - 1)

print(F(28))

########################################################################################################

# Алгоритмы вычисления значения функций F(n) и G(n), где n — натуральное число, заданы следующими соотношениями.

#    F(n) = n + 9 при n < 3;
#    F(n) = 2 ⋅ F(n – 1) + 3 ⋅ G(n – 2) при n ≥ 3.

#    G(n) = 25 – n при n < 4;
#    G(n) = 4 ⋅ G(n – 1) – F(n – 2) при n ≥ 4.

# Чему равно значение функции G(13)?

def F(n):
    if n < 3:
        return n + 9
    else:
        return 2*F(n - 1) + 3*G(n - 2)

def G(n):
    if n < 4:
        return 25 - n
    else:
        return 4*G(n - 1) - F(n - 2)

print(G(13))

########################################################################################################
# Алгоритмы вычисления значения функций F(n) и G(n), где n — натуральное число, заданы следующими соотношениями.

#    F(n) = n + 3 при n < 4;
#    F(n) = F(n – 4) + 3 ⋅ G(n – 2) + G(n – 1) при n ≥ 4.

#    G(n) = 3 ⋅ n при n < 5;
#    G(n) = F(n – 1) + G(n – 3) – F(n – 2) при n ≥ 5.

# Чему равна сумма значений функций G(20) и F(18)?

def F(n):
    if n < 4:
        return n + 3
    else:
        return F(n - 4) + 3*G(n - 2) + G(n - 1)

def G(n):
    if n < 5:
        return 3*n
    else:
        return F(n - 1) + G(n - 3) - F(n - 2)

print(F(18) + G(20))





