

# Исполнитель Плюс преобразует число на экране.
# У исполнителя есть две команды, которым присвоены номера:
#    1. Прибавить 2
#    2. Прибавить 4
# Первая команда увеличивает число на экране на 2, вторая увеличивает это число на 4. Программа для исполнителя Плюс — это последовательность команд.
# Сколько существует программ, которые число 9 преобразуют в число 25?



# Обе команды увеличивают число, поэтому из числа 4 в 2, напирмер, не попасть.
# Из числа 4 в 4 существует один путь
# Из числа 4 мы можем попасть в 8(+4) и в 6 (+2)

def F(x, y):       # возвращает количество путей из x в y
   if x > y:       # если начальное больше
        return 0   # возвращаем 0 путей
   elif x == y:    # количество путей из числа в само себя
        return 1   # равно 1
   else:           # иначе выполняем над x команды из условия и вызываем рекурсию
        return F(x + 2, y) + F(x + 4, y)

print(F(9, 25))

#########################################################################################

# Исполнитель Вычитатель преобразует число, которое записано на экране.
# У исполнителя Вычитатель две команды, которым присвоены номера:
#    1. Вычти 2
#    2. Вычти 5
# Первая из них уменьшает число на экране на 2, вторая уменьшает его на 5.
# Программа для Вычитателя — это последовательность команд.
# Сколько есть программ, которые число 32 преобразуют в число 12?


# Все тоже самое. Но теперь из большего в меньшее не попасть

def F(x, y):
    if x < y:  # если начальное меньше
        return 0  # возвращаем 0 путей
    elif x == y: 
        return 1
    else:  # иначе x > y
        return F(x - 2, y) + F(x - 5, y)

print(F(32, 12))

################################################################################################################################

# Исполнитель В16 преобразует число, записанное на экране.
# У исполнителя есть три команды, которым присвоены номера:
#      1. Прибавить 1
#      2. Прибавить 2
#      3. Умножить на 3
# Первая из них увеличивает число на экране на 1, вторая увеличивает его на 2, третья умножает его на 3.
# Программа для исполнителя В16 — это последовательность команд.
# Сколько существует таких программ, которые исходное число 2 преобразуют в число 14, и при этом траектория вычислений программы содержит число 10?
# Траектория вычислений программы — это последовательность результатов выполнения всех команд программы. Например, для программы 132 при исходном числе 7 траектория будет состоять из чисел 8, 24, 26.

# Если условие траектория содержит число N. То результатом будет F(a,N)*F(N,b)
def F(x, y):
    if x > y:
        return 0
    elif x == y: 
        return 1
    else:
        return F(x + 1, y) + F(x + 2, y) + F(x * 3, y)

print(F(2, 10) * F(10, 14))

################################################################################################################################

# Исполнитель А12 преобразует число, записанное на экране.
# У исполнителя есть две команды, которым присвоены номера:
#       1. Прибавить 1
#       2. Умножить на 2
# Первая из них увеличивает число на экране на 1, вторая умножает его на 2.
# Программа для исполнителя А12 — это последовательность команд.
# Сколько существует таких программ, которые преобразуют число 2 в число 29, притом траектория вычислений содержит число 9 и не содержит число 21?
# Траектория вычислений программы — это последовательность результатов выполнения всех команд программы. Например, для программы 122 при исходном числе 7 траектория будет состоять из чисел 8, 16, 32.

# Если условие траектория НЕ содержит число N. То Колличество вариантов попасть из N = 0. То есть. Если x == N: return 0
def F(x, y):
    if x > y or x == 21:
        return 0
    elif x == y: 
        return 1
    else:
        return F(x + 1, y) + F(2 * x, y)

print(F(2, 9) * F(9, 29))
